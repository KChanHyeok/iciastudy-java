다형성(Polymorphism)
    부모클래스로 만든 변수에 자식클래스의 인스턴스를 저장한는 것.
    자식클래스에 정의된 모든 기능을 사용할려면 다시 자식 클래스로
    만든 변수에 인스턴스를 옮겨야 하낟. (Down Casting)

    instanceof : 어떤 클래스로 만든 인스턴스인지를 구별하기 위한 명령어.

추상화(Abstraction)
    알고는 있으나 정확하게 표현하기 힘든것을 설명하는 것. - 추상적 표현

    개념 클래스 작성 - 추상화 -> 추상 클래스(Abstract)

    비접근제어자 - static, final, abstract

    추상 클래스 : 미완성 클래스. 완성클래스라는 것은 모든 멤버 메소드의 정의가 완전하게 끝난 상태의 클래스.
    추상 메소드 : 정의부가 작성되지 않은 메소드.

    반환형 메소드명() -> 선언부
  -----------------------
        {
            .......         -> 정의부
        }

  추상 클래스는 반드시 상속하여 자식클래스로 만들어서 사용하며 이 때, 미완성된 메소드의 정의부를 작성해야 한다.

  추상 클래스는 팀장이 팀원에게 일을 주는 경우에 많이 사용됨.
  오버라이딩을 강제하기 때문에 정해진 메소드 이름으로 새로운
  클래스를 작성하도록 하여 전체 프로젝트를 병렬화할 수 있음.

인터페이스(Interface)
    추상화 정도가 더 심한 클래스. 모든 메소드가 정의되지 않은 클래스.
    추상 메소드 + 상수(final 변수)
    인스턴스를 생성할 수 없다.
    목적은 새로운 클래스 작성에 도움을 주는 것.
    클래스 작성의 표준을 제시하는 것.

    코드 자동화(프레임워크)에 활용.

    인터페이스의 작성법
    1) class 라는 키워드 대신 interface 사용
    2) 모든 메소드는 추상 메소드며 재정의가 되어야 하기 때문에
       public abstract가 앞에 붙는다. 메소드 정의는 하지 않는다.
    3) 모든 변수에는 public static final 이 앞에 붙는다.
    4) 반드시 붙어야 하는 키워드는 생략할 수 있다.

    제어자 간 조합
    1. 메소드에 static과 abstract를 함께 사용할 수 없다.
      static - 인스턴스 없이 사용 가능
      abstract - 정의부가 없다.
    2. 클래스에 abstract와 final을 함께 사용할 수 없다.
      반드시 상속을 해야 한다. - abstract
      상속할 수 없다. - final
    3. abstract 메소드의 접근제어자가 private일 수 없다.
      private는 상속해도 사용할 수 없다.
      abstract는 재정의를 해야한다.
    4. 메소드에 private와 final을 같이 사용할 필요가 없다.
      private 하나로 모두 처리될 수 있기 때문.

일반적인 작성 순서
    접근제어자, 비접근제어자 순.

제어자의 대상
1) 클래스 - 접근제어자, abstract, final
2) 메소드 - 접근제어자, final, abstract, static
3) 멤버변수 - 접근제어자, final, static
4) 지역변수 - final

Inner Class(내부 클래스)
  클래스 내부에 작성하는 클래스. 클래스가 멤버가 된다.
  장점 > 외부 클래스의 멤버를 자유롭게 사용 가능해 진다.

익명 클래스
  인터페이스로 새로운 클래스를 파새 시킬 때 클래스의 이름이
  없이 바로 작성하여 인스턴스를 생성하는 클래스.
  클래스의 이름이 없기 때문에 익명 클래스라고 함.
  GUI 프로그래밍, 안드로이드 프로그래밍에서 많이 사용하는 방식.
  1회용, 전용 기능을 작성할 때 주로 사용.

ArrayList <- 자식 클래스 => List 인터페이스

객체 지향 특성
1. 캡슐화(정보은닉) - 클래스 작성.
2. 상속 - 기존 코드의 재활용.
3. 다형성 - 계층 구조로 만든 객체를 효율적으로 관리.
4. 추상화 - 개념에 대한 설계.

기타 유용한 객체들
문자열(String)
    1) equals() : 두 문자열 변수에 저장된 실제 데이터의 비교.
    2) concat() : 두 문자열을 결합. '+'와 같음.
    3) charAt(n) : 지정된 위치의 문자 가져오기.
    4) contains(str) : str이 있으면 true, 없으면 false
    5) indexOf(str, n) : str이 있으면 시작 위치를, 없으면 -1.
                n은 검색 시작 위치(생략하면 처음부터)
    6) split(구분자) : 구분자에 따라 문자열을 문자열 배열로 변환
    7) replace(str1, str3) :모든 str1을 str2로 변환.
        replaceAll(str1, str2) : 모든 str1을 str2로 변환
                    str1에 수식을 사용.
                    '['와']' 사이에 다음의 키워드를 입력.
                    ^ : not. str1을 제외한 나머지를 변경
                    - : 범위를 지정. 예) 0-9 : 모든 숫자
    8) length() : 문자열의 길이.
    9) subString(st, ed) : st부터 ed의 직전까지 문자열 추출


StringBuffer
    임시 저장고. 문자열 수정, 변경 등의 작업의 효율성을 높이는
    보조 객체.
    1) append(str) : 버퍼에 새 문자열을 추가.(뒤에 붙인다.)
    2) capacity() : 용량. 버퍼의 크기
    3) length() : 문자열의 길이
    4) delete(st, ed) : 지정된 범위의 문자열 삭제
    5) insert(idx, str) : 지정된 위치(idx)에 str삽입.
    6) replace(st, ed, str) : 지정된 범위의 문자열을 str로 변경.
    7) reverse() : 문자열의 순서를 역순으로 정렬.
    8) charAt(idx) : 지정된 위치의 문자를 가져온다.
    9) setCharAt(idx, char) : 지정된 위치에 문자를 변경한다.

파일(File)

날짜와 시간

실습) 일기장 만들기

DataBase > java와 DB 연동 > 프로젝트 > 조 재편성(spring)